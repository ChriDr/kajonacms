<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================

     Kajona Head Build
     Buildfile to perform additional actions such as phpunit-tests, phpdoc generation, ...
     Called by the buildserver, so change with care :)
     Note: the svn update is triggered by cruisecontrol directly.

     This buid-file may be migrated to phing, feel free to start the migration


     Author: sidler
     $Id$

     ====================================================================== -->
<project name="Kajona Head Build" default="buildSqliteFast" basedir=".">

    <description>
        Buildfile to run common tasks.
    </description>

    <!--
         CONFIG VALUES BELOW
     -->


    <!-- target dir for the sources from the svn repo -->
    <property name="sourcesPath"  value="/../" />
    <!-- target dir to install the system to -->
    <property name="projectPath"  value="/project" />
    <!-- artifacts such as logs and reports will be stored here -->
    <property name="buildPath"    value="/build" />
    <!-- generated zips will be placed here (full, light) -->
    <property name="packagesPath" value="/packages" />
    <!-- temp-folder, required to build the packages -->
    <property name="tempPath"     value="/temp/kajona" />




    <!-- path to phpdoc -->
    <property name="path.phpdoc"    value="phpdoc" />
    <!-- path to phpunit -->
    <property name="path.phpunit"   value="phpunit" />
    <!-- path to phpcs -->
    <property name="path.phpcs"     value="phpcs" />
    <!-- path to phpmd -->
    <property name="path.phpmd"     value="phpmd" />
    <!-- path to phpcpd -->
    <property name="path.phpcpd"    value="phpcpd" />
    <!-- path to pdepend -->
    <property name="path.pdepend"   value="pdepend" />

    <property name="path.php"       value="php" />

    <property name="path.phploc"    value="phploc" />

    <property name="path.phpcb"     value="phpcb" />


    <!--
             No need to change anything below!
     -->


    <!-- internal initialization -->
    <target name="init" depends="cleanFilesystem">
        <tstamp />

        <exec executable="svn" output="${basedir}${buildPath}/svn.properties">
            <arg line="info '${basedir}${sourcesPath}'" />
        </exec>
        <property prefix="svn" file="${basedir}${buildPath}/svn.properties"/>
        <echo>Revision found: ${svn.Revision}</echo>

    </target>


    <target name="buildSqliteFast" depends="
		    								cleanFilesystem, init,
					    					buildProject, installProjectSqlite,
					    					lint,phploc,phpunitFast,
					    					buildFullZip, buildLightZip, buildAllInOneZip" />


    <target name="buildSqliteFull" depends="
		    								cleanFilesystem, init,
					    					buildProject, installProjectSqlite,
					    					lint,phpunit,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,generatePhpDocs,phpcb,
					    					buildFullZip, buildLightZip, buildAllInOneZip" />

    <target name="buildMysql" depends="
		    								cleanFilesystem, init,
					    					buildProject, installProjectMysql,
					    					phpunitFast" />

    <target name="buildOracle" depends="
		    								cleanFilesystem, init,
					    					buildProject, installProjectOracle,
					    					phpunitFast" />

    <target name="buildFullZipOnly" depends="
                                            cleanFilesystem, init,
                                            buildProject, buildFullZip" />




    <!-- removes existing folders and creates them again -->
    <target name="cleanFilesystem">
        <delete dir="${basedir}${packagesPath}"/>
        <mkdir  dir="${basedir}${packagesPath}"/>

        <delete dir="${basedir}${tempPath}"/>
        <delete dir="${basedir}${tempPath}/../" />
        <mkdir  dir="${basedir}${tempPath}"/>
        <mkdir  dir="${basedir}${tempPath}/core"/>

        <delete dir="${basedir}${projectPath}"/>
        <mkdir  dir="${basedir}${projectPath}"/>
        <mkdir  dir="${basedir}${projectPath}/core"/>

        <delete dir="${basedir}${buildPath}"/>
        <mkdir  dir="${basedir}${buildPath}"/>
        <mkdir  dir="${basedir}${buildPath}/api"/>
        <mkdir  dir="${basedir}${buildPath}/logs"/>
        <mkdir  dir="${basedir}${buildPath}/coverage"/>
        <mkdir  dir="${basedir}${buildPath}/code-browser"/>
        <mkdir  dir="${basedir}${buildPath}/pdepend"/>
        <mkdir  dir="${basedir}${buildPath}/phpdox"/>

    </target>


    <!-- builds the project, aka creates a project out of the sources -->
    <target name="buildProject">
        <copy todir="${basedir}${projectPath}/core" overwrite="true"  includeEmptyDirs="true" >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".svn"/>
                <include name="element_*/**"/>
                <include name="module_*/*/**"/>
                <include name="template_*/*/**"/>
                <include name="_debugging/*/**"/>
                <include name="*.php"/>
                <include name="*.htaccess"/>
            </fileset>
        </copy>
    </target>

    <!-- creates the full-zip including all modules and elements -->
    <target name="buildFullZip" depends="init,setupPackageFolders" >
        <copy todir="${basedir}${tempPath}/core" overwrite="true"  includeEmptyDirs="true" >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".svn"/>
                <exclude name="module_pchart/" />

                <include name="element_*/**"/>
                <include name="module_*/*/**"/>
                <include name="template_*/*/**"/>
                <!--<include name="_debugging/*/**"/>-->
                <include name="*.php"/>
                <include name="*.htaccess"/>
            </fileset>
        </copy>

        <antcall target="buildPackageHelper" />

        <zip destfile="${basedir}${packagesPath}/kajona_v4_full_rev${svn.Revision}_${DSTAMP}-${TSTAMP}.zip">
            <fileset dir="${basedir}${tempPath}/../" />
        </zip>
    </target>

    <!-- creates the full-zip including all modules and elements -->
    <target name="buildAllInOneZip" depends="init,setupPackageFolders" >
        <copy todir="${basedir}${tempPath}/core" overwrite="true"  includeEmptyDirs="true" >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".svn"/>
                <exclude name="element_flash/" />
                <exclude name="element_maps/" />
                <exclude name="element_userlist/" />
                <exclude name="element_mediaplayer/" />
                <exclude name="module_ldap/" />
                <exclude name="module_packagserver/" />
                <exclude name="module_pchart/" />
                <exclude name="module_workflows/" />

                <include name="element_*/**"/>
                <include name="module_*/*/**"/>
                <include name="template_*/*/**"/>
                <!--<include name="_debugging/*/**"/>-->
                <include name="*.php"/>
                <include name="*.htaccess"/>
            </fileset>
        </copy>

        <antcall target="buildPackageHelper" />

        <zip destfile="${basedir}${packagesPath}/kajona_v4_allinone_rev${svn.Revision}_${DSTAMP}-${TSTAMP}.zip">
            <fileset dir="${basedir}${tempPath}/../" />
        </zip>
    </target>

    <!-- creates the light-zip, only a limited set of modules included -->
    <target name="buildLightZip" depends="init,setupPackageFolders">
        <copy todir="${basedir}${tempPath}/core" overwrite="true"  includeEmptyDirs="true"  >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".svn"/>
                <include name="module_navigation/*/**"/>
                <include name="module_pages/*/**"/>
                <include name="module_samplecontent/*/**"/>
                <include name="module_packagemanager/*/**"/>
                <include name="module_system/**"/>
                <include name="module_search/**"/>
                <include name="module_tags/**"/>
                <include name="module_dashboard/**"/>
                <include name="module_installer/*/**"/>
                <include name="module_v4skin/*/**"/>
                <include name="*.php"/>
                <include name="*.htaccess"/>
            </fileset>
        </copy>

        <antcall target="buildPackageHelper" />

        <zip destfile="${basedir}${packagesPath}/kajona_v4_light_rev${svn.Revision}_${DSTAMP}-${TSTAMP}.zip">
            <fileset dir="${basedir}${tempPath}/../" />
        </zip>
    </target>

    <target name="modulePackagesZipHelper" depends="init" description="call this task before using the shellscript in order to generate module-zips">
        <copy todir="${basedir}${tempPath}/core" overwrite="true"  includeEmptyDirs="true"  >
            <fileset id="sources.dirs" dir="${basedir}${sourcesPath}">
                <exclude name=".svn"/>
                <include name="element_*/**"/>
                <include name="module_*/*/**"/>
                <include name="template_*/*/**"/>
                <include name="_debugging/*/**"/>
                <include name="*.php"/>
            </fileset>
        </copy>

        <apply executable="unoconv" parallel="false" dest="${basedir}${tempPath}" verbose="true">
            <arg line="-f pdf"/>
            <fileset dir="${basedir}${tempPath}" includes="**/*.odt"/>
            <arg value="-o" />
            <targetfile/>
            <srcfile/>
            <mapper type="glob" from="*.odt" to="*.pdf"/>
        </apply>

        <antcall target="buildPackageHelper" />

    </target>

    <target name="buildPackageHelper" description="triggers the project setup and the compilation / compression of css / js files">
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${tempPath} onlySetup"/>
        </exec>
        <antcall target="compileLess" />
        <antcall target="compressCss" />
        <antcall target="compressJs" />
        <antcall target="cleanZipContent" />
    </target>

    <target name="setupPackageFolders" description="deletes the temp-folders and creates the initial structure">
        <delete dir="${basedir}${tempPath}"/>
        <mkdir  dir="${basedir}${tempPath}"/>
        <mkdir  dir="${basedir}${tempPath}/core"/>
    </target>

    <!-- triggers the installation of the project aka. creating the db-structure -->

    <!-- sqlite3 config file -->
    <target name="installProjectSqlite">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_sqlite3.php"/>
        </exec>
    </target>

    <!-- mysql config file -->
    <target name="installProjectMysql">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_mysql.php"/>
        </exec>
    </target>

    <!-- oracle config file -->
    <target name="installProjectOracle">
        <echo>Creating full Kajona installation</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f buildProject.php ${projectPath} false config_oracle.php"/>
        </exec>
    </target>




    <target name="cleanZipContent" description="Removes internal files used by the development not to be included into the build zips">
        <delete>
            <fileset dir="${basedir}${tempPath}" includes="**/*.less"/>
            <fileset dir="${basedir}${tempPath}" includes="**/less.js"/>
            <fileset dir="${basedir}${tempPath}" includes="**/*.odt"/>
        </delete>
    </target>


    <target name="compileLess" description="Compiles the less files and inserts them into to tpl files">
        <echo>Compiling less files</echo>
        <exec executable="php" dir="${basedir}"  failonerror="on" >
            <arg line="-f lessc/v4setup.php "/>
        </exec>
    </target>



    <target name="compressCss" description="Minifies the css files using the yui compressor">
        <echo>Compressing css files</echo>

        <copy todir="${basedir}${tempPath}">
            <fileset dir="${basedir}${tempPath}">
                <include name="**/*.css"/>
            </fileset>
            <globmapper from="*.css" to="*-full.css"/>
        </copy>

        <apply executable="java" parallel="false" dest="${basedir}${tempPath}" verbose="true">
            <fileset dir="${basedir}${tempPath}" includes="**/*-full.css"/>
            <arg line="-jar"/>
            <arg path="yuicompressor-2.4.6.jar"/>
            <arg line="--charset utf-8"/>
            <arg line="-o"/>
            <mapper type="glob" from="*-full.css" to="*.css"/>
            <targetfile/>
            <srcfile/>
        </apply>
    </target>


    <target name="compressJs" description="Minifies the js files using the yui compressor">
        <echo>Compressing js files</echo>

        <copy todir="${basedir}${tempPath}"> <!-- add verbose="true" to see the list of applied files -->
            <fileset dir="${basedir}${tempPath}">
                <include name="**/*.js"/>
                <exclude name="**/*min.js" />
                <exclude name="**/jquery*.js" />
                <exclude name="**/ckeditor/**/*.js" />
                <exclude name="**/halloeditor/**/*.js" />
                <exclude name="**/rangy/**/*.js" />
            </fileset>
            <globmapper from="*.js" to="*-full.js"/>
        </copy>

        <apply executable="java" parallel="false" dest="${basedir}${tempPath}" verbose="true">
            <fileset dir="${basedir}${tempPath}" includes="**/*-full.js"/>
            <arg line="-jar"/>
            <arg path="yuicompressor-2.4.6.jar"/>
            <arg line="--charset utf-8"/>
            <arg line="-o"/>
            <mapper type="glob" from="*-full.js" to="*.js"/>
            <targetfile/>
            <srcfile/>
        </apply>
    </target>


    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="${path.php}" failonerror="true">
            <arg value="-l" />

            <fileset dir="${basedir}${projectPath}">
                <include name="**/*.php" />
                <modified />
            </fileset>

        </apply>
    </target>

    <target name="phploc" description="Measure project size using PHPLOC">
        <exec executable="${path.phploc}">
            <arg line=" --exclude ${basedir}${projectPath}/core/module_ezcchart/system/ezcomponents --exclude ${basedir}${projectPath}/core/module_pchart/system/pchart --exclude ${basedir}${projectPath}/core/module_pdf/system/tcpdf --exclude ${basedir}${projectPath}/core/module_system/system/phpexcel --exclude ${basedir}${projectPath}/core/module_qrcode/system/phpqrcode   "/>
            <arg value="--log-csv" />
            <arg value="${basedir}${buildPath}/logs/phploc.csv" />
            <arg path="${basedir}${projectPath}" />
        </exec>
    </target>

    <target name="pdepend" description="Calculate software metrics using PHP_Depend">
        <exec executable="${path.pdepend}">
            <arg value="--jdepend-xml=${basedir}${buildPath}/logs/jdepend.xml" />
            <arg value="--jdepend-chart=${basedir}${buildPath}/pdepend/dependencies.svg" />
            <arg value="--overview-pyramid=${basedir}${buildPath}/pdepend/overview-pyramid.svg" />
            <arg value="--ignore=${basedir}${projectPath}/core/module_ezcchart/system/ezcomponents,${basedir}${projectPath}/core/module_pchart/system/pchart,${basedir}${projectPath}/core/module_pdf/system/tcpdf,${basedir}${projectPath}/core/module_system/system/phpexcel,${basedir}${projectPath}/core/module_qrcode/system/phpqrcode "/>
            <arg path="${basedir}${projectPath}" />
        </exec>
    </target>


    <target name="phpmd-ci" description="Perform project mess detection using PHPMD creating a log file for the continuous integration server">
        <exec executable="${path.phpmd}">
            <arg path="${basedir}${projectPath}" />
            <arg value="xml" />
            <arg value="--exclude" />
            <arg value="*yui*,*tcpdf*,*fonts*,*pchart*,*ezcomponents*,*phpexcel*,*phpqrcode*" />
            <arg value="--reportfile" />
            <arg value="${basedir}${buildPath}/logs/pmd.xml" />
            <arg value="${basedir}/phpmd-ruleset.xml" />
        </exec>
    </target>


    <target name="phpcs-ci" description="Find coding standard violations using PHP_CodeSniffer creating a log file for the continuous integration server">
        <exec executable="${path.phpcs}" output="/dev/null">
            <arg value="--tab-width=4" />
            <arg value="--report=checkstyle" />
            <arg value="--report-file=${basedir}${buildPath}/logs/checkstyle.xml" />
            <arg value="--standard=${basedir}/phpcs-ruleset.xml" />
            <arg path="${basedir}${projectPath}" />
        </exec>
    </target>

    <target name="phpcpd" description="Find duplicate code using PHPCPD">
        <exec executable="${path.phpcpd}">
            <arg line=" --exclude ${basedir}${projectPath}/core/module_ezcchart/system/ezcomponents --exclude ${basedir}${projectPath}/core/module_pchart/system/pchart --exclude ${basedir}${projectPath}/core/module_pdf/system/tcpdf --exclude ${basedir}${projectPath}/core/module_system/system/phpexcel --exclude ${basedir}${projectPath}/core/module_qrcode/system/phpqrcode   "/>
            <arg value="--log-pmd" />
            <arg value="${basedir}${buildPath}/logs/pmd-cpd.xml" />
            <arg path="${basedir}${projectPath}" />
        </exec>
    </target>





    <!-- requires phpDocumentor, binary phpdoc -->
    <target name="generatePhpDocs">
        <echo>Generating PHP API Docs</echo>
        <exec executable="${path.phpdoc}" dir="${basedir}${projectPath}/core">
            <arg line=" -ue on -t '${basedir}${buildPath}/api'
			           -i *tcpdf*,*pchart*,*yui*,*ezcomponents*,*phpexcel*,*phpqrcode*
			          -ti 'Kajona API Docs'
			           -dn module_system
			           -d ."/>
        </exec>
    </target>



    <target name="phpunit" description="Run unit tests with PHPUnit">
        <exec executable="${path.phpunit}" failonerror="true">
            <arg line="--configuration ${basedir}/phpunit.xml " />
            <arg path="${basedir}${projectPath}" />
        </exec>
    </target>

    <target name="phpunitFast" description="Run unit tests with PHPUnit">
        <exec executable="${path.phpunit}" failonerror="true">
            <arg line="--configuration ${basedir}/phpunit_fast.xml " />
            <arg path="${basedir}${projectPath}" />
        </exec>
    </target>

    <target name="phpcb" description="Aggregate tool output with PHP_CodeBrowser">
        <exec executable="${path.phpcb}">
            <arg value="--log" />
            <arg path="${basedir}${buildPath}/logs" />
            <arg value="--source" />
            <arg path="${basedir}${projectPath}/core" />
            <arg value="--output" />
            <arg path="${basedir}${buildPath}/code-browser" />
        </exec>
    </target>


    <target name="odt2pdf" description="converts odt files to pdfs" depends="cleanFilesystem, init, buildProject">
        <apply executable="unoconv" parallel="false" dest="${basedir}${projectPath}" verbose="true">
            <arg line="-f pdf"/>
            <fileset dir="${basedir}${projectPath}" includes="**/*.odt"/>
            <arg value="-o" />
            <targetfile/>
            <srcfile/>
            <mapper type="glob" from="*.odt" to="*.pdf"/>
        </apply>
    </target>

</project>
